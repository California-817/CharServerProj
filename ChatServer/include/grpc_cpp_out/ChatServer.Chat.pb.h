// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ChatServer.Chat.proto
// Protobuf C++ Version: 5.29.0

#ifndef ChatServer_2eChat_2eproto_2epb_2eh
#define ChatServer_2eChat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ChatServer_2eChat_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatServer_2eChat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ChatServer_2eChat_2eproto;
namespace ChatServer {
namespace Chat {
class AddFriendReq;
struct AddFriendReqDefaultTypeInternal;
extern AddFriendReqDefaultTypeInternal _AddFriendReq_default_instance_;
class AddFriendRsp;
struct AddFriendRspDefaultTypeInternal;
extern AddFriendRspDefaultTypeInternal _AddFriendRsp_default_instance_;
class AuthFriendReq;
struct AuthFriendReqDefaultTypeInternal;
extern AuthFriendReqDefaultTypeInternal _AuthFriendReq_default_instance_;
class AuthFriendRsp;
struct AuthFriendRspDefaultTypeInternal;
extern AuthFriendRspDefaultTypeInternal _AuthFriendRsp_default_instance_;
class TextChatData;
struct TextChatDataDefaultTypeInternal;
extern TextChatDataDefaultTypeInternal _TextChatData_default_instance_;
class TextChatMsgReq;
struct TextChatMsgReqDefaultTypeInternal;
extern TextChatMsgReqDefaultTypeInternal _TextChatMsgReq_default_instance_;
class TextChatMsgRsp;
struct TextChatMsgRspDefaultTypeInternal;
extern TextChatMsgRspDefaultTypeInternal _TextChatMsgRsp_default_instance_;
}  // namespace Chat
}  // namespace ChatServer
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ChatServer {
namespace Chat {

// ===================================================================


// -------------------------------------------------------------------

class TextChatData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatServer.Chat.TextChatData) */ {
 public:
  inline TextChatData() : TextChatData(nullptr) {}
  ~TextChatData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextChatData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextChatData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextChatData(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextChatData(const TextChatData& from) : TextChatData(nullptr, from) {}
  inline TextChatData(TextChatData&& from) noexcept
      : TextChatData(nullptr, std::move(from)) {}
  inline TextChatData& operator=(const TextChatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatData& operator=(TextChatData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatData* internal_default_instance() {
    return reinterpret_cast<const TextChatData*>(
        &_TextChatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TextChatData& a, TextChatData& b) { a.Swap(&b); }
  inline void Swap(TextChatData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextChatData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextChatData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextChatData& from) { TextChatData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextChatData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatServer.Chat.TextChatData"; }

 protected:
  explicit TextChatData(::google::protobuf::Arena* arena);
  TextChatData(::google::protobuf::Arena* arena, const TextChatData& from);
  TextChatData(::google::protobuf::Arena* arena, TextChatData&& from) noexcept
      : TextChatData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgidFieldNumber = 1,
    kMsgcontentFieldNumber = 2,
  };
  // string msgid = 1;
  void clear_msgid() ;
  const std::string& msgid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msgid(Arg_&& arg, Args_... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* value);

  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(
      const std::string& value);
  std::string* _internal_mutable_msgid();

  public:
  // string msgcontent = 2;
  void clear_msgcontent() ;
  const std::string& msgcontent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msgcontent(Arg_&& arg, Args_... args);
  std::string* mutable_msgcontent();
  PROTOBUF_NODISCARD std::string* release_msgcontent();
  void set_allocated_msgcontent(std::string* value);

  private:
  const std::string& _internal_msgcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgcontent(
      const std::string& value);
  std::string* _internal_mutable_msgcontent();

  public:
  // @@protoc_insertion_point(class_scope:ChatServer.Chat.TextChatData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextChatData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr msgid_;
    ::google::protobuf::internal::ArenaStringPtr msgcontent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eChat_2eproto;
};
// -------------------------------------------------------------------

class AuthFriendRsp final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatServer.Chat.AuthFriendRsp) */ {
 public:
  inline AuthFriendRsp() : AuthFriendRsp(nullptr) {}
  ~AuthFriendRsp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthFriendRsp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthFriendRsp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthFriendRsp(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthFriendRsp(const AuthFriendRsp& from) : AuthFriendRsp(nullptr, from) {}
  inline AuthFriendRsp(AuthFriendRsp&& from) noexcept
      : AuthFriendRsp(nullptr, std::move(from)) {}
  inline AuthFriendRsp& operator=(const AuthFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthFriendRsp& operator=(AuthFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AuthFriendRsp*>(
        &_AuthFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AuthFriendRsp& a, AuthFriendRsp& b) { a.Swap(&b); }
  inline void Swap(AuthFriendRsp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthFriendRsp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthFriendRsp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthFriendRsp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthFriendRsp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthFriendRsp& from) { AuthFriendRsp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthFriendRsp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatServer.Chat.AuthFriendRsp"; }

 protected:
  explicit AuthFriendRsp(::google::protobuf::Arena* arena);
  AuthFriendRsp(::google::protobuf::Arena* arena, const AuthFriendRsp& from);
  AuthFriendRsp(::google::protobuf::Arena* arena, AuthFriendRsp&& from) noexcept
      : AuthFriendRsp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
    kFromuidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error() ;
  ::int32_t error() const;
  void set_error(::int32_t value);

  private:
  ::int32_t _internal_error() const;
  void _internal_set_error(::int32_t value);

  public:
  // int32 fromuid = 2;
  void clear_fromuid() ;
  ::int32_t fromuid() const;
  void set_fromuid(::int32_t value);

  private:
  ::int32_t _internal_fromuid() const;
  void _internal_set_fromuid(::int32_t value);

  public:
  // int32 touid = 3;
  void clear_touid() ;
  ::int32_t touid() const;
  void set_touid(::int32_t value);

  private:
  ::int32_t _internal_touid() const;
  void _internal_set_touid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ChatServer.Chat.AuthFriendRsp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthFriendRsp& from_msg);
    ::int32_t error_;
    ::int32_t fromuid_;
    ::int32_t touid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eChat_2eproto;
};
// -------------------------------------------------------------------

class AuthFriendReq final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatServer.Chat.AuthFriendReq) */ {
 public:
  inline AuthFriendReq() : AuthFriendReq(nullptr) {}
  ~AuthFriendReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthFriendReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthFriendReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthFriendReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthFriendReq(const AuthFriendReq& from) : AuthFriendReq(nullptr, from) {}
  inline AuthFriendReq(AuthFriendReq&& from) noexcept
      : AuthFriendReq(nullptr, std::move(from)) {}
  inline AuthFriendReq& operator=(const AuthFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthFriendReq& operator=(AuthFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthFriendReq* internal_default_instance() {
    return reinterpret_cast<const AuthFriendReq*>(
        &_AuthFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AuthFriendReq& a, AuthFriendReq& b) { a.Swap(&b); }
  inline void Swap(AuthFriendReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthFriendReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthFriendReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthFriendReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthFriendReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthFriendReq& from) { AuthFriendReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthFriendReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatServer.Chat.AuthFriendReq"; }

 protected:
  explicit AuthFriendReq(::google::protobuf::Arena* arena);
  AuthFriendReq(::google::protobuf::Arena* arena, const AuthFriendReq& from);
  AuthFriendReq(::google::protobuf::Arena* arena, AuthFriendReq&& from) noexcept
      : AuthFriendReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromuidFieldNumber = 1,
    kTouidFieldNumber = 2,
  };
  // int32 fromuid = 1;
  void clear_fromuid() ;
  ::int32_t fromuid() const;
  void set_fromuid(::int32_t value);

  private:
  ::int32_t _internal_fromuid() const;
  void _internal_set_fromuid(::int32_t value);

  public:
  // int32 touid = 2;
  void clear_touid() ;
  ::int32_t touid() const;
  void set_touid(::int32_t value);

  private:
  ::int32_t _internal_touid() const;
  void _internal_set_touid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ChatServer.Chat.AuthFriendReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthFriendReq& from_msg);
    ::int32_t fromuid_;
    ::int32_t touid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eChat_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRsp final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatServer.Chat.AddFriendRsp) */ {
 public:
  inline AddFriendRsp() : AddFriendRsp(nullptr) {}
  ~AddFriendRsp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddFriendRsp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddFriendRsp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddFriendRsp(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddFriendRsp(const AddFriendRsp& from) : AddFriendRsp(nullptr, from) {}
  inline AddFriendRsp(AddFriendRsp&& from) noexcept
      : AddFriendRsp(nullptr, std::move(from)) {}
  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRsp& operator=(AddFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AddFriendRsp*>(
        &_AddFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AddFriendRsp& a, AddFriendRsp& b) { a.Swap(&b); }
  inline void Swap(AddFriendRsp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRsp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRsp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddFriendRsp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddFriendRsp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddFriendRsp& from) { AddFriendRsp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddFriendRsp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatServer.Chat.AddFriendRsp"; }

 protected:
  explicit AddFriendRsp(::google::protobuf::Arena* arena);
  AddFriendRsp(::google::protobuf::Arena* arena, const AddFriendRsp& from);
  AddFriendRsp(::google::protobuf::Arena* arena, AddFriendRsp&& from) noexcept
      : AddFriendRsp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
    kApplyuidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error() ;
  ::int32_t error() const;
  void set_error(::int32_t value);

  private:
  ::int32_t _internal_error() const;
  void _internal_set_error(::int32_t value);

  public:
  // int32 applyuid = 2;
  void clear_applyuid() ;
  ::int32_t applyuid() const;
  void set_applyuid(::int32_t value);

  private:
  ::int32_t _internal_applyuid() const;
  void _internal_set_applyuid(::int32_t value);

  public:
  // int32 touid = 3;
  void clear_touid() ;
  ::int32_t touid() const;
  void set_touid(::int32_t value);

  private:
  ::int32_t _internal_touid() const;
  void _internal_set_touid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ChatServer.Chat.AddFriendRsp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddFriendRsp& from_msg);
    ::int32_t error_;
    ::int32_t applyuid_;
    ::int32_t touid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eChat_2eproto;
};
// -------------------------------------------------------------------

class AddFriendReq final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatServer.Chat.AddFriendReq) */ {
 public:
  inline AddFriendReq() : AddFriendReq(nullptr) {}
  ~AddFriendReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddFriendReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddFriendReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddFriendReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddFriendReq(const AddFriendReq& from) : AddFriendReq(nullptr, from) {}
  inline AddFriendReq(AddFriendReq&& from) noexcept
      : AddFriendReq(nullptr, std::move(from)) {}
  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendReq& operator=(AddFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendReq* internal_default_instance() {
    return reinterpret_cast<const AddFriendReq*>(
        &_AddFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AddFriendReq& a, AddFriendReq& b) { a.Swap(&b); }
  inline void Swap(AddFriendReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddFriendReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddFriendReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddFriendReq& from) { AddFriendReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddFriendReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatServer.Chat.AddFriendReq"; }

 protected:
  explicit AddFriendReq(::google::protobuf::Arena* arena);
  AddFriendReq(::google::protobuf::Arena* arena, const AddFriendReq& from);
  AddFriendReq(::google::protobuf::Arena* arena, AddFriendReq&& from) noexcept
      : AddFriendReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kIconFieldNumber = 4,
    kNickFieldNumber = 5,
    kApplyuidFieldNumber = 1,
    kSexFieldNumber = 6,
    kTouidFieldNumber = 7,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string desc = 3;
  void clear_desc() ;
  const std::string& desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_desc(Arg_&& arg, Args_... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* value);

  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(
      const std::string& value);
  std::string* _internal_mutable_desc();

  public:
  // string icon = 4;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* value);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // string nick = 5;
  void clear_nick() ;
  const std::string& nick() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nick(Arg_&& arg, Args_... args);
  std::string* mutable_nick();
  PROTOBUF_NODISCARD std::string* release_nick();
  void set_allocated_nick(std::string* value);

  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(
      const std::string& value);
  std::string* _internal_mutable_nick();

  public:
  // int32 applyuid = 1;
  void clear_applyuid() ;
  ::int32_t applyuid() const;
  void set_applyuid(::int32_t value);

  private:
  ::int32_t _internal_applyuid() const;
  void _internal_set_applyuid(::int32_t value);

  public:
  // int32 sex = 6;
  void clear_sex() ;
  ::int32_t sex() const;
  void set_sex(::int32_t value);

  private:
  ::int32_t _internal_sex() const;
  void _internal_set_sex(::int32_t value);

  public:
  // int32 touid = 7;
  void clear_touid() ;
  ::int32_t touid() const;
  void set_touid(::int32_t value);

  private:
  ::int32_t _internal_touid() const;
  void _internal_set_touid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ChatServer.Chat.AddFriendReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddFriendReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr desc_;
    ::google::protobuf::internal::ArenaStringPtr icon_;
    ::google::protobuf::internal::ArenaStringPtr nick_;
    ::int32_t applyuid_;
    ::int32_t sex_;
    ::int32_t touid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eChat_2eproto;
};
// -------------------------------------------------------------------

class TextChatMsgRsp final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatServer.Chat.TextChatMsgRsp) */ {
 public:
  inline TextChatMsgRsp() : TextChatMsgRsp(nullptr) {}
  ~TextChatMsgRsp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextChatMsgRsp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextChatMsgRsp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextChatMsgRsp(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextChatMsgRsp(const TextChatMsgRsp& from) : TextChatMsgRsp(nullptr, from) {}
  inline TextChatMsgRsp(TextChatMsgRsp&& from) noexcept
      : TextChatMsgRsp(nullptr, std::move(from)) {}
  inline TextChatMsgRsp& operator=(const TextChatMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatMsgRsp& operator=(TextChatMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatMsgRsp* internal_default_instance() {
    return reinterpret_cast<const TextChatMsgRsp*>(
        &_TextChatMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TextChatMsgRsp& a, TextChatMsgRsp& b) { a.Swap(&b); }
  inline void Swap(TextChatMsgRsp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatMsgRsp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatMsgRsp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextChatMsgRsp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextChatMsgRsp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextChatMsgRsp& from) { TextChatMsgRsp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextChatMsgRsp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatServer.Chat.TextChatMsgRsp"; }

 protected:
  explicit TextChatMsgRsp(::google::protobuf::Arena* arena);
  TextChatMsgRsp(::google::protobuf::Arena* arena, const TextChatMsgRsp& from);
  TextChatMsgRsp(::google::protobuf::Arena* arena, TextChatMsgRsp&& from) noexcept
      : TextChatMsgRsp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTextmsgsFieldNumber = 3,
    kFromidFieldNumber = 1,
    kToidFieldNumber = 2,
    kErrorFieldNumber = 4,
  };
  // repeated .ChatServer.Chat.TextChatData textmsgs = 3;
  int textmsgs_size() const;
  private:
  int _internal_textmsgs_size() const;

  public:
  void clear_textmsgs() ;
  ::ChatServer::Chat::TextChatData* mutable_textmsgs(int index);
  ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>* mutable_textmsgs();

  private:
  const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>& _internal_textmsgs() const;
  ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>* _internal_mutable_textmsgs();
  public:
  const ::ChatServer::Chat::TextChatData& textmsgs(int index) const;
  ::ChatServer::Chat::TextChatData* add_textmsgs();
  const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>& textmsgs() const;
  // int32 fromid = 1;
  void clear_fromid() ;
  ::int32_t fromid() const;
  void set_fromid(::int32_t value);

  private:
  ::int32_t _internal_fromid() const;
  void _internal_set_fromid(::int32_t value);

  public:
  // int32 toid = 2;
  void clear_toid() ;
  ::int32_t toid() const;
  void set_toid(::int32_t value);

  private:
  ::int32_t _internal_toid() const;
  void _internal_set_toid(::int32_t value);

  public:
  // int32 error = 4;
  void clear_error() ;
  ::int32_t error() const;
  void set_error(::int32_t value);

  private:
  ::int32_t _internal_error() const;
  void _internal_set_error(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ChatServer.Chat.TextChatMsgRsp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextChatMsgRsp& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ChatServer::Chat::TextChatData > textmsgs_;
    ::int32_t fromid_;
    ::int32_t toid_;
    ::int32_t error_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eChat_2eproto;
};
// -------------------------------------------------------------------

class TextChatMsgReq final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatServer.Chat.TextChatMsgReq) */ {
 public:
  inline TextChatMsgReq() : TextChatMsgReq(nullptr) {}
  ~TextChatMsgReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextChatMsgReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextChatMsgReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextChatMsgReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextChatMsgReq(const TextChatMsgReq& from) : TextChatMsgReq(nullptr, from) {}
  inline TextChatMsgReq(TextChatMsgReq&& from) noexcept
      : TextChatMsgReq(nullptr, std::move(from)) {}
  inline TextChatMsgReq& operator=(const TextChatMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatMsgReq& operator=(TextChatMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatMsgReq* internal_default_instance() {
    return reinterpret_cast<const TextChatMsgReq*>(
        &_TextChatMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TextChatMsgReq& a, TextChatMsgReq& b) { a.Swap(&b); }
  inline void Swap(TextChatMsgReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatMsgReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatMsgReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextChatMsgReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextChatMsgReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextChatMsgReq& from) { TextChatMsgReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextChatMsgReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatServer.Chat.TextChatMsgReq"; }

 protected:
  explicit TextChatMsgReq(::google::protobuf::Arena* arena);
  TextChatMsgReq(::google::protobuf::Arena* arena, const TextChatMsgReq& from);
  TextChatMsgReq(::google::protobuf::Arena* arena, TextChatMsgReq&& from) noexcept
      : TextChatMsgReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTextmsgsFieldNumber = 3,
    kFromidFieldNumber = 1,
    kToidFieldNumber = 2,
  };
  // repeated .ChatServer.Chat.TextChatData textmsgs = 3;
  int textmsgs_size() const;
  private:
  int _internal_textmsgs_size() const;

  public:
  void clear_textmsgs() ;
  ::ChatServer::Chat::TextChatData* mutable_textmsgs(int index);
  ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>* mutable_textmsgs();

  private:
  const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>& _internal_textmsgs() const;
  ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>* _internal_mutable_textmsgs();
  public:
  const ::ChatServer::Chat::TextChatData& textmsgs(int index) const;
  ::ChatServer::Chat::TextChatData* add_textmsgs();
  const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>& textmsgs() const;
  // int32 fromid = 1;
  void clear_fromid() ;
  ::int32_t fromid() const;
  void set_fromid(::int32_t value);

  private:
  ::int32_t _internal_fromid() const;
  void _internal_set_fromid(::int32_t value);

  public:
  // int32 toid = 2;
  void clear_toid() ;
  ::int32_t toid() const;
  void set_toid(::int32_t value);

  private:
  ::int32_t _internal_toid() const;
  void _internal_set_toid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ChatServer.Chat.TextChatMsgReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextChatMsgReq& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ChatServer::Chat::TextChatData > textmsgs_;
    ::int32_t fromid_;
    ::int32_t toid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eChat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AddFriendReq

// int32 applyuid = 1;
inline void AddFriendReq::clear_applyuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.applyuid_ = 0;
}
inline ::int32_t AddFriendReq::applyuid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendReq.applyuid)
  return _internal_applyuid();
}
inline void AddFriendReq::set_applyuid(::int32_t value) {
  _internal_set_applyuid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendReq.applyuid)
}
inline ::int32_t AddFriendReq::_internal_applyuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.applyuid_;
}
inline void AddFriendReq::_internal_set_applyuid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.applyuid_ = value;
}

// string name = 2;
inline void AddFriendReq::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AddFriendReq::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendReq.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendReq::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendReq.name)
}
inline std::string* AddFriendReq::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.AddFriendReq.name)
  return _s;
}
inline const std::string& AddFriendReq::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void AddFriendReq::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AddFriendReq::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AddFriendReq::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatServer.Chat.AddFriendReq.name)
  return _impl_.name_.Release();
}
inline void AddFriendReq::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatServer.Chat.AddFriendReq.name)
}

// string desc = 3;
inline void AddFriendReq::clear_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& AddFriendReq::desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendReq.desc)
  return _internal_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendReq::set_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendReq.desc)
}
inline std::string* AddFriendReq::mutable_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.AddFriendReq.desc)
  return _s;
}
inline const std::string& AddFriendReq::_internal_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.desc_.Get();
}
inline void AddFriendReq::_internal_set_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(value, GetArena());
}
inline std::string* AddFriendReq::_internal_mutable_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.desc_.Mutable( GetArena());
}
inline std::string* AddFriendReq::release_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatServer.Chat.AddFriendReq.desc)
  return _impl_.desc_.Release();
}
inline void AddFriendReq::set_allocated_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatServer.Chat.AddFriendReq.desc)
}

// string icon = 4;
inline void AddFriendReq::clear_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& AddFriendReq::icon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendReq.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendReq::set_icon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendReq.icon)
}
inline std::string* AddFriendReq::mutable_icon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.AddFriendReq.icon)
  return _s;
}
inline const std::string& AddFriendReq::_internal_icon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.icon_.Get();
}
inline void AddFriendReq::_internal_set_icon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(value, GetArena());
}
inline std::string* AddFriendReq::_internal_mutable_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.icon_.Mutable( GetArena());
}
inline std::string* AddFriendReq::release_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatServer.Chat.AddFriendReq.icon)
  return _impl_.icon_.Release();
}
inline void AddFriendReq::set_allocated_icon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatServer.Chat.AddFriendReq.icon)
}

// string nick = 5;
inline void AddFriendReq::clear_nick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nick_.ClearToEmpty();
}
inline const std::string& AddFriendReq::nick() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendReq.nick)
  return _internal_nick();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendReq::set_nick(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nick_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendReq.nick)
}
inline std::string* AddFriendReq::mutable_nick() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.AddFriendReq.nick)
  return _s;
}
inline const std::string& AddFriendReq::_internal_nick() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nick_.Get();
}
inline void AddFriendReq::_internal_set_nick(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nick_.Set(value, GetArena());
}
inline std::string* AddFriendReq::_internal_mutable_nick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nick_.Mutable( GetArena());
}
inline std::string* AddFriendReq::release_nick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatServer.Chat.AddFriendReq.nick)
  return _impl_.nick_.Release();
}
inline void AddFriendReq::set_allocated_nick(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nick_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nick_.IsDefault()) {
    _impl_.nick_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatServer.Chat.AddFriendReq.nick)
}

// int32 sex = 6;
inline void AddFriendReq::clear_sex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sex_ = 0;
}
inline ::int32_t AddFriendReq::sex() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendReq.sex)
  return _internal_sex();
}
inline void AddFriendReq::set_sex(::int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendReq.sex)
}
inline ::int32_t AddFriendReq::_internal_sex() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sex_;
}
inline void AddFriendReq::_internal_set_sex(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sex_ = value;
}

// int32 touid = 7;
inline void AddFriendReq::clear_touid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = 0;
}
inline ::int32_t AddFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendReq.touid)
  return _internal_touid();
}
inline void AddFriendReq::set_touid(::int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendReq.touid)
}
inline ::int32_t AddFriendReq::_internal_touid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.touid_;
}
inline void AddFriendReq::_internal_set_touid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = value;
}

// -------------------------------------------------------------------

// AddFriendRsp

// int32 error = 1;
inline void AddFriendRsp::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_ = 0;
}
inline ::int32_t AddFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendRsp.error)
  return _internal_error();
}
inline void AddFriendRsp::set_error(::int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendRsp.error)
}
inline ::int32_t AddFriendRsp::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_;
}
inline void AddFriendRsp::_internal_set_error(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_ = value;
}

// int32 applyuid = 2;
inline void AddFriendRsp::clear_applyuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.applyuid_ = 0;
}
inline ::int32_t AddFriendRsp::applyuid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendRsp.applyuid)
  return _internal_applyuid();
}
inline void AddFriendRsp::set_applyuid(::int32_t value) {
  _internal_set_applyuid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendRsp.applyuid)
}
inline ::int32_t AddFriendRsp::_internal_applyuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.applyuid_;
}
inline void AddFriendRsp::_internal_set_applyuid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.applyuid_ = value;
}

// int32 touid = 3;
inline void AddFriendRsp::clear_touid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = 0;
}
inline ::int32_t AddFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AddFriendRsp.touid)
  return _internal_touid();
}
inline void AddFriendRsp::set_touid(::int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AddFriendRsp.touid)
}
inline ::int32_t AddFriendRsp::_internal_touid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.touid_;
}
inline void AddFriendRsp::_internal_set_touid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = value;
}

// -------------------------------------------------------------------

// AuthFriendReq

// int32 fromuid = 1;
inline void AuthFriendReq::clear_fromuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromuid_ = 0;
}
inline ::int32_t AuthFriendReq::fromuid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AuthFriendReq.fromuid)
  return _internal_fromuid();
}
inline void AuthFriendReq::set_fromuid(::int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AuthFriendReq.fromuid)
}
inline ::int32_t AuthFriendReq::_internal_fromuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fromuid_;
}
inline void AuthFriendReq::_internal_set_fromuid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromuid_ = value;
}

// int32 touid = 2;
inline void AuthFriendReq::clear_touid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = 0;
}
inline ::int32_t AuthFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AuthFriendReq.touid)
  return _internal_touid();
}
inline void AuthFriendReq::set_touid(::int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AuthFriendReq.touid)
}
inline ::int32_t AuthFriendReq::_internal_touid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.touid_;
}
inline void AuthFriendReq::_internal_set_touid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = value;
}

// -------------------------------------------------------------------

// AuthFriendRsp

// int32 error = 1;
inline void AuthFriendRsp::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_ = 0;
}
inline ::int32_t AuthFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AuthFriendRsp.error)
  return _internal_error();
}
inline void AuthFriendRsp::set_error(::int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AuthFriendRsp.error)
}
inline ::int32_t AuthFriendRsp::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_;
}
inline void AuthFriendRsp::_internal_set_error(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_ = value;
}

// int32 fromuid = 2;
inline void AuthFriendRsp::clear_fromuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromuid_ = 0;
}
inline ::int32_t AuthFriendRsp::fromuid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AuthFriendRsp.fromuid)
  return _internal_fromuid();
}
inline void AuthFriendRsp::set_fromuid(::int32_t value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AuthFriendRsp.fromuid)
}
inline ::int32_t AuthFriendRsp::_internal_fromuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fromuid_;
}
inline void AuthFriendRsp::_internal_set_fromuid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromuid_ = value;
}

// int32 touid = 3;
inline void AuthFriendRsp::clear_touid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = 0;
}
inline ::int32_t AuthFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.AuthFriendRsp.touid)
  return _internal_touid();
}
inline void AuthFriendRsp::set_touid(::int32_t value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.AuthFriendRsp.touid)
}
inline ::int32_t AuthFriendRsp::_internal_touid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.touid_;
}
inline void AuthFriendRsp::_internal_set_touid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.touid_ = value;
}

// -------------------------------------------------------------------

// TextChatMsgReq

// int32 fromid = 1;
inline void TextChatMsgReq::clear_fromid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromid_ = 0;
}
inline ::int32_t TextChatMsgReq::fromid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatMsgReq.fromid)
  return _internal_fromid();
}
inline void TextChatMsgReq::set_fromid(::int32_t value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.TextChatMsgReq.fromid)
}
inline ::int32_t TextChatMsgReq::_internal_fromid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fromid_;
}
inline void TextChatMsgReq::_internal_set_fromid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromid_ = value;
}

// int32 toid = 2;
inline void TextChatMsgReq::clear_toid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.toid_ = 0;
}
inline ::int32_t TextChatMsgReq::toid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatMsgReq.toid)
  return _internal_toid();
}
inline void TextChatMsgReq::set_toid(::int32_t value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.TextChatMsgReq.toid)
}
inline ::int32_t TextChatMsgReq::_internal_toid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.toid_;
}
inline void TextChatMsgReq::_internal_set_toid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.toid_ = value;
}

// repeated .ChatServer.Chat.TextChatData textmsgs = 3;
inline int TextChatMsgReq::_internal_textmsgs_size() const {
  return _internal_textmsgs().size();
}
inline int TextChatMsgReq::textmsgs_size() const {
  return _internal_textmsgs_size();
}
inline void TextChatMsgReq::clear_textmsgs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.textmsgs_.Clear();
}
inline ::ChatServer::Chat::TextChatData* TextChatMsgReq::mutable_textmsgs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.TextChatMsgReq.textmsgs)
  return _internal_mutable_textmsgs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>* TextChatMsgReq::mutable_textmsgs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ChatServer.Chat.TextChatMsgReq.textmsgs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_textmsgs();
}
inline const ::ChatServer::Chat::TextChatData& TextChatMsgReq::textmsgs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatMsgReq.textmsgs)
  return _internal_textmsgs().Get(index);
}
inline ::ChatServer::Chat::TextChatData* TextChatMsgReq::add_textmsgs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ChatServer::Chat::TextChatData* _add = _internal_mutable_textmsgs()->Add();
  // @@protoc_insertion_point(field_add:ChatServer.Chat.TextChatMsgReq.textmsgs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>& TextChatMsgReq::textmsgs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ChatServer.Chat.TextChatMsgReq.textmsgs)
  return _internal_textmsgs();
}
inline const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>&
TextChatMsgReq::_internal_textmsgs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.textmsgs_;
}
inline ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>*
TextChatMsgReq::_internal_mutable_textmsgs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.textmsgs_;
}

// -------------------------------------------------------------------

// TextChatData

// string msgid = 1;
inline void TextChatData::clear_msgid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& TextChatData::msgid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatData.msgid)
  return _internal_msgid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextChatData::set_msgid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatServer.Chat.TextChatData.msgid)
}
inline std::string* TextChatData::mutable_msgid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.TextChatData.msgid)
  return _s;
}
inline const std::string& TextChatData::_internal_msgid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msgid_.Get();
}
inline void TextChatData::_internal_set_msgid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgid_.Set(value, GetArena());
}
inline std::string* TextChatData::_internal_mutable_msgid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msgid_.Mutable( GetArena());
}
inline std::string* TextChatData::release_msgid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatServer.Chat.TextChatData.msgid)
  return _impl_.msgid_.Release();
}
inline void TextChatData::set_allocated_msgid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatServer.Chat.TextChatData.msgid)
}

// string msgcontent = 2;
inline void TextChatData::clear_msgcontent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgcontent_.ClearToEmpty();
}
inline const std::string& TextChatData::msgcontent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatData.msgcontent)
  return _internal_msgcontent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextChatData::set_msgcontent(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgcontent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatServer.Chat.TextChatData.msgcontent)
}
inline std::string* TextChatData::mutable_msgcontent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msgcontent();
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.TextChatData.msgcontent)
  return _s;
}
inline const std::string& TextChatData::_internal_msgcontent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msgcontent_.Get();
}
inline void TextChatData::_internal_set_msgcontent(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgcontent_.Set(value, GetArena());
}
inline std::string* TextChatData::_internal_mutable_msgcontent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msgcontent_.Mutable( GetArena());
}
inline std::string* TextChatData::release_msgcontent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatServer.Chat.TextChatData.msgcontent)
  return _impl_.msgcontent_.Release();
}
inline void TextChatData::set_allocated_msgcontent(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgcontent_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msgcontent_.IsDefault()) {
    _impl_.msgcontent_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatServer.Chat.TextChatData.msgcontent)
}

// -------------------------------------------------------------------

// TextChatMsgRsp

// int32 error = 4;
inline void TextChatMsgRsp::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_ = 0;
}
inline ::int32_t TextChatMsgRsp::error() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatMsgRsp.error)
  return _internal_error();
}
inline void TextChatMsgRsp::set_error(::int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.TextChatMsgRsp.error)
}
inline ::int32_t TextChatMsgRsp::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_;
}
inline void TextChatMsgRsp::_internal_set_error(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_ = value;
}

// int32 fromid = 1;
inline void TextChatMsgRsp::clear_fromid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromid_ = 0;
}
inline ::int32_t TextChatMsgRsp::fromid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatMsgRsp.fromid)
  return _internal_fromid();
}
inline void TextChatMsgRsp::set_fromid(::int32_t value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.TextChatMsgRsp.fromid)
}
inline ::int32_t TextChatMsgRsp::_internal_fromid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fromid_;
}
inline void TextChatMsgRsp::_internal_set_fromid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fromid_ = value;
}

// int32 toid = 2;
inline void TextChatMsgRsp::clear_toid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.toid_ = 0;
}
inline ::int32_t TextChatMsgRsp::toid() const {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatMsgRsp.toid)
  return _internal_toid();
}
inline void TextChatMsgRsp::set_toid(::int32_t value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:ChatServer.Chat.TextChatMsgRsp.toid)
}
inline ::int32_t TextChatMsgRsp::_internal_toid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.toid_;
}
inline void TextChatMsgRsp::_internal_set_toid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.toid_ = value;
}

// repeated .ChatServer.Chat.TextChatData textmsgs = 3;
inline int TextChatMsgRsp::_internal_textmsgs_size() const {
  return _internal_textmsgs().size();
}
inline int TextChatMsgRsp::textmsgs_size() const {
  return _internal_textmsgs_size();
}
inline void TextChatMsgRsp::clear_textmsgs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.textmsgs_.Clear();
}
inline ::ChatServer::Chat::TextChatData* TextChatMsgRsp::mutable_textmsgs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ChatServer.Chat.TextChatMsgRsp.textmsgs)
  return _internal_mutable_textmsgs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>* TextChatMsgRsp::mutable_textmsgs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ChatServer.Chat.TextChatMsgRsp.textmsgs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_textmsgs();
}
inline const ::ChatServer::Chat::TextChatData& TextChatMsgRsp::textmsgs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatServer.Chat.TextChatMsgRsp.textmsgs)
  return _internal_textmsgs().Get(index);
}
inline ::ChatServer::Chat::TextChatData* TextChatMsgRsp::add_textmsgs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ChatServer::Chat::TextChatData* _add = _internal_mutable_textmsgs()->Add();
  // @@protoc_insertion_point(field_add:ChatServer.Chat.TextChatMsgRsp.textmsgs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>& TextChatMsgRsp::textmsgs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ChatServer.Chat.TextChatMsgRsp.textmsgs)
  return _internal_textmsgs();
}
inline const ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>&
TextChatMsgRsp::_internal_textmsgs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.textmsgs_;
}
inline ::google::protobuf::RepeatedPtrField<::ChatServer::Chat::TextChatData>*
TextChatMsgRsp::_internal_mutable_textmsgs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.textmsgs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Chat
}  // namespace ChatServer


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ChatServer_2eChat_2eproto_2epb_2eh
