// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ChatServer.Chat.proto

#include "ChatServer.Chat.pb.h"
#include "ChatServer.Chat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ChatServer {
namespace Chat {

static const char* ChatService_method_names[] = {
  "/ChatServer.Chat.ChatService/NotifyAddFriend",
  "/ChatServer.Chat.ChatService/NotifyAuthFriend",
  "/ChatServer.Chat.ChatService/NotifyTextChatMsg",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel, options));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NotifyAddFriend_(ChatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyAuthFriend_(ChatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyTextChatMsg_(ChatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatService::Stub::NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::ChatServer::Chat::AddFriendRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyAddFriend_, context, request, response);
}

void ChatService::Stub::async::NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyAddFriend_, context, request, response, std::move(f));
}

void ChatService::Stub::async::NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyAddFriend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>* ChatService::Stub::PrepareAsyncNotifyAddFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatServer::Chat::AddFriendRsp, ::ChatServer::Chat::AddFriendReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyAddFriend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>* ChatService::Stub::AsyncNotifyAddFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyAddFriendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::ChatServer::Chat::AuthFriendRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyAuthFriend_, context, request, response);
}

void ChatService::Stub::async::NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyAuthFriend_, context, request, response, std::move(f));
}

void ChatService::Stub::async::NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyAuthFriend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>* ChatService::Stub::PrepareAsyncNotifyAuthFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatServer::Chat::AuthFriendRsp, ::ChatServer::Chat::AuthFriendReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyAuthFriend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>* ChatService::Stub::AsyncNotifyAuthFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyAuthFriendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::ChatServer::Chat::TextChatMsgRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyTextChatMsg_, context, request, response);
}

void ChatService::Stub::async::NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyTextChatMsg_, context, request, response, std::move(f));
}

void ChatService::Stub::async::NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyTextChatMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>* ChatService::Stub::PrepareAsyncNotifyTextChatMsgRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatServer::Chat::TextChatMsgRsp, ::ChatServer::Chat::TextChatMsgReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyTextChatMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>* ChatService::Stub::AsyncNotifyTextChatMsgRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyTextChatMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatServer::Chat::AddFriendReq* req,
             ::ChatServer::Chat::AddFriendRsp* resp) {
               return service->NotifyAddFriend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatServer::Chat::AuthFriendReq* req,
             ::ChatServer::Chat::AuthFriendRsp* resp) {
               return service->NotifyAuthFriend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatServer::Chat::TextChatMsgReq* req,
             ::ChatServer::Chat::TextChatMsgRsp* resp) {
               return service->NotifyTextChatMsg(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::NotifyAddFriend(::grpc::ServerContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::NotifyAuthFriend(::grpc::ServerContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::NotifyTextChatMsg(::grpc::ServerContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ChatServer
}  // namespace Chat

