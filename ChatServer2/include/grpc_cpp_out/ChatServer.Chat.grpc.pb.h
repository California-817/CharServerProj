// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ChatServer.Chat.proto
#ifndef GRPC_ChatServer_2eChat_2eproto__INCLUDED
#define GRPC_ChatServer_2eChat_2eproto__INCLUDED

#include "ChatServer.Chat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace ChatServer {
namespace Chat {

// rpc服务
class ChatService final {
 public:
  static constexpr char const* service_full_name() {
    return "ChatServer.Chat.ChatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::ChatServer::Chat::AddFriendRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AddFriendRsp>> AsyncNotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AddFriendRsp>>(AsyncNotifyAddFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AddFriendRsp>> PrepareAsyncNotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AddFriendRsp>>(PrepareAsyncNotifyAddFriendRaw(context, request, cq));
    }
    virtual ::grpc::Status NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::ChatServer::Chat::AuthFriendRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AuthFriendRsp>> AsyncNotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AuthFriendRsp>>(AsyncNotifyAuthFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AuthFriendRsp>> PrepareAsyncNotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AuthFriendRsp>>(PrepareAsyncNotifyAuthFriendRaw(context, request, cq));
    }
    virtual ::grpc::Status NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::ChatServer::Chat::TextChatMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::TextChatMsgRsp>> AsyncNotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::TextChatMsgRsp>>(AsyncNotifyTextChatMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::TextChatMsgRsp>> PrepareAsyncNotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::TextChatMsgRsp>>(PrepareAsyncNotifyTextChatMsgRaw(context, request, cq));
    }
    virtual ::grpc::Status NotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::ChatServer::Chat::KickUserRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::KickUserRsp>> AsyncNotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::KickUserRsp>>(AsyncNotifyKickUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::KickUserRsp>> PrepareAsyncNotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::KickUserRsp>>(PrepareAsyncNotifyKickUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq* request, ::ChatServer::Chat::KickUserRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq* request, ::ChatServer::Chat::KickUserRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AddFriendRsp>* AsyncNotifyAddFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AddFriendRsp>* PrepareAsyncNotifyAddFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AuthFriendRsp>* AsyncNotifyAuthFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::AuthFriendRsp>* PrepareAsyncNotifyAuthFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::TextChatMsgRsp>* AsyncNotifyTextChatMsgRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::TextChatMsgRsp>* PrepareAsyncNotifyTextChatMsgRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::KickUserRsp>* AsyncNotifyKickUserRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatServer::Chat::KickUserRsp>* PrepareAsyncNotifyKickUserRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::ChatServer::Chat::AddFriendRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>> AsyncNotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>>(AsyncNotifyAddFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>> PrepareAsyncNotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>>(PrepareAsyncNotifyAddFriendRaw(context, request, cq));
    }
    ::grpc::Status NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::ChatServer::Chat::AuthFriendRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>> AsyncNotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>>(AsyncNotifyAuthFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>> PrepareAsyncNotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>>(PrepareAsyncNotifyAuthFriendRaw(context, request, cq));
    }
    ::grpc::Status NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::ChatServer::Chat::TextChatMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>> AsyncNotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>>(AsyncNotifyTextChatMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>> PrepareAsyncNotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>>(PrepareAsyncNotifyTextChatMsgRaw(context, request, cq));
    }
    ::grpc::Status NotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::ChatServer::Chat::KickUserRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::KickUserRsp>> AsyncNotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::KickUserRsp>>(AsyncNotifyKickUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::KickUserRsp>> PrepareAsyncNotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::KickUserRsp>>(PrepareAsyncNotifyKickUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response, std::function<void(::grpc::Status)>) override;
      void NotifyAddFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response, std::function<void(::grpc::Status)>) override;
      void NotifyAuthFriend(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void NotifyTextChatMsg(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq* request, ::ChatServer::Chat::KickUserRsp* response, std::function<void(::grpc::Status)>) override;
      void NotifyKickUser(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq* request, ::ChatServer::Chat::KickUserRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>* AsyncNotifyAddFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AddFriendRsp>* PrepareAsyncNotifyAddFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AddFriendReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>* AsyncNotifyAuthFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::AuthFriendRsp>* PrepareAsyncNotifyAuthFriendRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::AuthFriendReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>* AsyncNotifyTextChatMsgRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::TextChatMsgRsp>* PrepareAsyncNotifyTextChatMsgRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::TextChatMsgReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::KickUserRsp>* AsyncNotifyKickUserRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatServer::Chat::KickUserRsp>* PrepareAsyncNotifyKickUserRaw(::grpc::ClientContext* context, const ::ChatServer::Chat::KickUserReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyAddFriend_;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyAuthFriend_;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyTextChatMsg_;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyKickUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NotifyAddFriend(::grpc::ServerContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response);
    virtual ::grpc::Status NotifyAuthFriend(::grpc::ServerContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response);
    virtual ::grpc::Status NotifyTextChatMsg(::grpc::ServerContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response);
    virtual ::grpc::Status NotifyKickUser(::grpc::ServerContext* context, const ::ChatServer::Chat::KickUserReq* request, ::ChatServer::Chat::KickUserRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyAddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyAddFriend() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NotifyAddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAddFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AddFriendReq* /*request*/, ::ChatServer::Chat::AddFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyAddFriend(::grpc::ServerContext* context, ::ChatServer::Chat::AddFriendReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatServer::Chat::AddFriendRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyAuthFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyAuthFriend() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NotifyAuthFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAuthFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AuthFriendReq* /*request*/, ::ChatServer::Chat::AuthFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyAuthFriend(::grpc::ServerContext* context, ::ChatServer::Chat::AuthFriendReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatServer::Chat::AuthFriendRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyTextChatMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyTextChatMsg() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NotifyTextChatMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyTextChatMsg(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::TextChatMsgReq* /*request*/, ::ChatServer::Chat::TextChatMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyTextChatMsg(::grpc::ServerContext* context, ::ChatServer::Chat::TextChatMsgReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatServer::Chat::TextChatMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyKickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyKickUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NotifyKickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyKickUser(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::KickUserReq* /*request*/, ::ChatServer::Chat::KickUserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyKickUser(::grpc::ServerContext* context, ::ChatServer::Chat::KickUserReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatServer::Chat::KickUserRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NotifyAddFriend<WithAsyncMethod_NotifyAuthFriend<WithAsyncMethod_NotifyTextChatMsg<WithAsyncMethod_NotifyKickUser<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NotifyAddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyAddFriend() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatServer::Chat::AddFriendReq* request, ::ChatServer::Chat::AddFriendRsp* response) { return this->NotifyAddFriend(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyAddFriend(
        ::grpc::MessageAllocator< ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyAddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAddFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AddFriendReq* /*request*/, ::ChatServer::Chat::AddFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyAddFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatServer::Chat::AddFriendReq* /*request*/, ::ChatServer::Chat::AddFriendRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NotifyAuthFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyAuthFriend() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatServer::Chat::AuthFriendReq* request, ::ChatServer::Chat::AuthFriendRsp* response) { return this->NotifyAuthFriend(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyAuthFriend(
        ::grpc::MessageAllocator< ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyAuthFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAuthFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AuthFriendReq* /*request*/, ::ChatServer::Chat::AuthFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyAuthFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatServer::Chat::AuthFriendReq* /*request*/, ::ChatServer::Chat::AuthFriendRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NotifyTextChatMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyTextChatMsg() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatServer::Chat::TextChatMsgReq* request, ::ChatServer::Chat::TextChatMsgRsp* response) { return this->NotifyTextChatMsg(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyTextChatMsg(
        ::grpc::MessageAllocator< ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyTextChatMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyTextChatMsg(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::TextChatMsgReq* /*request*/, ::ChatServer::Chat::TextChatMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyTextChatMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatServer::Chat::TextChatMsgReq* /*request*/, ::ChatServer::Chat::TextChatMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NotifyKickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyKickUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::KickUserReq, ::ChatServer::Chat::KickUserRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatServer::Chat::KickUserReq* request, ::ChatServer::Chat::KickUserRsp* response) { return this->NotifyKickUser(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyKickUser(
        ::grpc::MessageAllocator< ::ChatServer::Chat::KickUserReq, ::ChatServer::Chat::KickUserRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatServer::Chat::KickUserReq, ::ChatServer::Chat::KickUserRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyKickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyKickUser(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::KickUserReq* /*request*/, ::ChatServer::Chat::KickUserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyKickUser(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatServer::Chat::KickUserReq* /*request*/, ::ChatServer::Chat::KickUserRsp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NotifyAddFriend<WithCallbackMethod_NotifyAuthFriend<WithCallbackMethod_NotifyTextChatMsg<WithCallbackMethod_NotifyKickUser<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NotifyAddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyAddFriend() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NotifyAddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAddFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AddFriendReq* /*request*/, ::ChatServer::Chat::AddFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NotifyAuthFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyAuthFriend() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NotifyAuthFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAuthFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AuthFriendReq* /*request*/, ::ChatServer::Chat::AuthFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NotifyTextChatMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyTextChatMsg() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NotifyTextChatMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyTextChatMsg(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::TextChatMsgReq* /*request*/, ::ChatServer::Chat::TextChatMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NotifyKickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyKickUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NotifyKickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyKickUser(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::KickUserReq* /*request*/, ::ChatServer::Chat::KickUserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyAddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyAddFriend() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NotifyAddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAddFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AddFriendReq* /*request*/, ::ChatServer::Chat::AddFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyAddFriend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyAuthFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyAuthFriend() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NotifyAuthFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAuthFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AuthFriendReq* /*request*/, ::ChatServer::Chat::AuthFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyAuthFriend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyTextChatMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyTextChatMsg() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NotifyTextChatMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyTextChatMsg(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::TextChatMsgReq* /*request*/, ::ChatServer::Chat::TextChatMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyTextChatMsg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyKickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyKickUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NotifyKickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyKickUser(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::KickUserReq* /*request*/, ::ChatServer::Chat::KickUserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyKickUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyAddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyAddFriend() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyAddFriend(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyAddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAddFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AddFriendReq* /*request*/, ::ChatServer::Chat::AddFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyAddFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyAuthFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyAuthFriend() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyAuthFriend(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyAuthFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyAuthFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AuthFriendReq* /*request*/, ::ChatServer::Chat::AuthFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyAuthFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyTextChatMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyTextChatMsg() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyTextChatMsg(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyTextChatMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyTextChatMsg(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::TextChatMsgReq* /*request*/, ::ChatServer::Chat::TextChatMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyTextChatMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyKickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyKickUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyKickUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyKickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyKickUser(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::KickUserReq* /*request*/, ::ChatServer::Chat::KickUserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyKickUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyAddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyAddFriend() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatServer::Chat::AddFriendReq, ::ChatServer::Chat::AddFriendRsp>* streamer) {
                       return this->StreamedNotifyAddFriend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyAddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyAddFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AddFriendReq* /*request*/, ::ChatServer::Chat::AddFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyAddFriend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatServer::Chat::AddFriendReq,::ChatServer::Chat::AddFriendRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyAuthFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyAuthFriend() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatServer::Chat::AuthFriendReq, ::ChatServer::Chat::AuthFriendRsp>* streamer) {
                       return this->StreamedNotifyAuthFriend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyAuthFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyAuthFriend(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::AuthFriendReq* /*request*/, ::ChatServer::Chat::AuthFriendRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyAuthFriend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatServer::Chat::AuthFriendReq,::ChatServer::Chat::AuthFriendRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyTextChatMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyTextChatMsg() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatServer::Chat::TextChatMsgReq, ::ChatServer::Chat::TextChatMsgRsp>* streamer) {
                       return this->StreamedNotifyTextChatMsg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyTextChatMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyTextChatMsg(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::TextChatMsgReq* /*request*/, ::ChatServer::Chat::TextChatMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyTextChatMsg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatServer::Chat::TextChatMsgReq,::ChatServer::Chat::TextChatMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyKickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyKickUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatServer::Chat::KickUserReq, ::ChatServer::Chat::KickUserRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatServer::Chat::KickUserReq, ::ChatServer::Chat::KickUserRsp>* streamer) {
                       return this->StreamedNotifyKickUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyKickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyKickUser(::grpc::ServerContext* /*context*/, const ::ChatServer::Chat::KickUserReq* /*request*/, ::ChatServer::Chat::KickUserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyKickUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatServer::Chat::KickUserReq,::ChatServer::Chat::KickUserRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NotifyAddFriend<WithStreamedUnaryMethod_NotifyAuthFriend<WithStreamedUnaryMethod_NotifyTextChatMsg<WithStreamedUnaryMethod_NotifyKickUser<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NotifyAddFriend<WithStreamedUnaryMethod_NotifyAuthFriend<WithStreamedUnaryMethod_NotifyTextChatMsg<WithStreamedUnaryMethod_NotifyKickUser<Service > > > > StreamedService;
};

}  // namespace Chat
}  // namespace ChatServer


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_ChatServer_2eChat_2eproto__INCLUDED
